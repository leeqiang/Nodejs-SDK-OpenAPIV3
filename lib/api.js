// Generated by CoffeeScript 1.6.2
(function() {
  var Network, OPEN_HTTP_TRANSLATE_ERROR, OpenAPIV3, Sign, Stat;

  Sign = require('./signature');

  Network = require('./network');

  Stat = require('./stat');

  OPEN_HTTP_TRANSLATE_ERROR = 1801;

  OpenAPIV3 = (function() {
    OpenAPIV3.prototype._appId = 0;

    OpenAPIV3.prototype._appKey = '';

    OpenAPIV3.prototype._api = null;

    OpenAPIV3.prototype._statUrl = "apistat.tencentyun.com";

    OpenAPIV3.prototype._statApi = null;

    OpenAPIV3.prototype._isStat = false;

    function OpenAPIV3(appId, appKey, serverIp) {
      this.appId = appId;
      this.appKey = appKey;
      this.serverIp = serverIp;
      this._appId = this.appId;
      this._appKey = this.appKey;
      this._api = new Network(this._appKey, this.serverIp);
      this._statApi = new Stat();
    }

    OpenAPIV3.prototype.call = function(urlPath, _params, method, protocol, next) {
      var error, k, params, startTime, v;

      params = {};
      for (k in _params) {
        v = _params[k];
        params[k] = v;
      }
      if (typeof method === 'function') {
        next = method;
        method = 'get';
        protocol = 'http';
      }
      if (typeof protocol === 'function') {
        next = protocol;
        protocol = 'http';
      }
      params.appid = this._appId;
      params.format = 'json';
      startTime = this._statApi.getTime();
      try {
        return this._api.open(urlPath, params, method, protocol, function(data) {
          var statParams;

          data = JSON.parse(data);
          if (this._isStat === true) {
            statParams = {};
            statParams.appid = params.appid;
            statParams.pf = params.pf;
            statParams.svr_name = [this.serverIp];
            statParams["interface"] = urlPath;
            statParams.protocol = protocol;
            statParams.method = method;
            if (data.hasOwnProperty('ret')) {
              statParams.rc = data.ret;
            } else {
              statParams.rc = '-123456';
            }
            this._statApi.statReport(this._statUrl, startTime, statParams);
          }
          return next(data);
        });
      } catch (_error) {
        error = _error;
        return {
          'ret': OPEN_HTTP_TRANSLATE_ERROR,
          'msg': error
        };
      }
    };

    OpenAPIV3.prototype.verifyPayCallbackSig = function(method, urlPath, params) {
      var sig;

      sig = Sign.makeSig(method, urlPath, params, this._appKey, true);
      return (params != null ? params.sig : void 0) === sig;
    };

    return OpenAPIV3;

  })();

  module.exports = OpenAPIV3;

}).call(this);
