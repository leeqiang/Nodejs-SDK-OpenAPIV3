// Generated by CoffeeScript 1.6.2
(function() {
  var Signature, crypto, makeSource, payRepValue, sort;

  crypto = require('crypto');

  Signature = module.exports;

  Signature.makeSig = function(method, apiUrl, params, secret, isVerifyPay) {
    var signature, source;

    source = makeSource(method, apiUrl, params, isVerifyPay);
    secret = "" + secret + "&";
    signature = crypto.createHmac('sha1', secret).update(source).digest('base64');
    return encodeURIComponent(signature);
  };

  Signature.urlencode = function(params, isVerifyPay) {
    var key, source, val;

    source = [];
    for (key in params) {
      val = params[key];
      if (isVerifyPay) {
        val = payRepValue(val);
      }
      source.push("" + key + "=" + val);
    }
    return source.join('&');
  };

  makeSource = function(method, apiUrl, params) {
    var source;

    method = method.toUpperCase();
    apiUrl = encodeURIComponent(apiUrl);
    params = sort(params);
    params = Signature.urlencode(params);
    source = encodeURIComponent(params);
    return "" + method + "&" + apiUrl + "&" + source;
  };

  sort = function(params) {
    var key, keys, result, val, _i, _len;

    keys = [];
    for (key in params) {
      val = params[key];
      keys.push(key);
    }
    keys.sort();
    result = {};
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      result[key] = params[key];
    }
    return result;
  };

  payRepValue = function(src) {
    var dst, it, _i, _len;

    src = src.toString();
    dst = '';
    for (_i = 0, _len = src.length; _i < _len; _i++) {
      it = src[_i];
      if (it.match(/[0-9a-zA-Z!*()]/)) {
        dst += it;
      } else {
        dst += '%' + it.charCodeAt(0).toString(16).toUpperCase();
      }
    }
    return dst;
  };

}).call(this);
